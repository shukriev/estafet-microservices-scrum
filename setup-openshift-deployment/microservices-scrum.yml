---
- name: Install Estafet Microservices Application in Openshift
  hosts: localhost
  vars_files:
    - vars.yml
  tasks:
  
    - include: setup.yml
    
    - name: Login in Openshift
      shell: "oc login --insecure-skip-tls-verify=true -u {{ username }} -p {{ password }} {{ openshift }}"
      tags:
        - openshift
        
    - name: Create a new Openshift project
      shell: "oc new-project {{ project_name }} --display-name='Scrum Management Demo'"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        
    - name: Define Openshift project
      shell: "oc project {{ project_name }}"
      tags:
        - openshift  
               
    - name: Install xpaas image streams
      shell: "oc create -f {{ workdir }}/openshift-ansible/roles/openshift_examples/files/examples/v3.7/xpaas-streams/jboss-image-streams.json -n {{ project_name }}"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        - xpaas 
      
    - name: Install xpaas source to image templates
      shell: "oc create -f {{ workdir }}/openshift-ansible/roles/openshift_examples/files/examples/v3.7/xpaas-templates -n {{ project_name }}"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        - xpaas       

    - name: Install the PostgreSQL server
      shell : "oc new-app postgresql-persistent --name postgresql"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        - postgres   

    - name: wait for postgresql
      wait_for: timeout=90
      delegate_to: localhost

    - name: Set the db credentials
      shell: "oc env dc postgresql -e POSTGRESQL_USER=postgres -e POSTGRESQL_PASSWORD=welcome1"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        - postgres   

    - name: wait for postgresql to redeploy
      wait_for: timeout=20
      delegate_to: localhost

    - include: postgres-vars.yml

    - name: Copy ddl to PostgreSQL Pod
      shell: 'oc rsync --no-perms=true --include="*.ddl" --exclude="*" {{ workdir }}/{{ item.repo }}/ {{db_pod}}:/tmp'
      register: command_result
      when: "{{ item.db }}"
      with_items: "{{ microservices_scrum_projects }}"
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        - postgresql

    - name: Create the microservice databases on PostgreSQL Pod
      shell: 'oc exec {{db_pod}} -- /bin/sh -i -c "createdb {{ item.name }}"'
      register: command_result
      when: "{{ item.db }}"      
      with_items: "{{ microservices_scrum_projects }}"
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        - postgresql

    - name: Execute Drop ddl on PostgreSQL Pod
      shell: 'oc exec {{db_pod}} -- /bin/sh -i -c "psql -d {{ item.name }} -U postgres -f /tmp/{{ item.drop_ddl }}"'
      register: command_result
      when: "{{ item.db }}"
      with_items: "{{ microservices_scrum_projects }}"
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        - postgresql

    - name: Execute Create ddl on PostgreSQL Pod
      shell: 'oc exec {{db_pod}} -- /bin/sh -i -c "psql -d {{ item.name }} -U postgres -f /tmp/{{ item.create_ddl }}"'
      register: command_result
      when: "{{ item.db }}"
      with_items: "{{ microservices_scrum_projects }}"
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        - postgresql
                
    - name: Install the JBoss A-MQ Message Broker
      shell: "oc process amq63-basic -p IMAGE_STREAM_NAMESPACE={{ project_name }} | oc create -f -"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        - a-mq        
        
    - name: wait for a-mq
      wait_for: timeout=60
      delegate_to: localhost        

    - include: a-mq-vars.yml    
        
    - name: Install Jeager
      shell: "oc process -f https://raw.githubusercontent.com/jaegertracing/jaeger-openshift/master/all-in-one/jaeger-all-in-one-template.yml | oc create -f -"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        - opentracing
        - jaeger       

    - name: wait for jaeger
      wait_for: timeout=10
      delegate_to: localhost          

    - include: services-vars.yml    
      
    - name: Create the microservices application from the source to image builder for db application
      shell: 'oc new-app redhat-openjdk18-openshift~https://github.com/shukriev/{{ item.repo }} --name={{ item.name }} -e {{ item.db_url_env }}=jdbc:postgresql://{{ db_ip }}:5432/{{ item.name }} -e {{ item.db_user_env }}=postgres -e {{ item.db_db_env }}=welcome1 -e JBOSS_A_MQ_BROKER_URL=tcp://{{ broker_ip }}:61616 -e JBOSS_A_MQ_BROKER_USER={{ broker_pod_user }} -e JBOSS_A_MQ_BROKER_PASSWORD={{ broker_pod_password }} {{ service_envs }} && sleep 120'
      register: command_result
      when: "{{ item.db }}"
      with_items: "{{ microservices_scrum_projects }}"
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        
    - name: Create the microservices application from the source to image builder for non db applications
      shell: 'oc new-app redhat-openjdk18-openshift~https://github.com/shukriev/{{ item.repo }} --name={{ item.name }} {{ service_envs }} && sleep 120'
      register: command_result
      when: "{{ item.db }} == false"
      with_items: "{{ microservices_scrum_projects }}"
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift        
      
    - name: Expose Basic UI
      shell: "oc expose service basic-ui"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift           

            